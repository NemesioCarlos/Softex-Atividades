1) function criarFrases(): void {
    console.log("Estudar é bom")
    console.log("Paciência e persistência")
    console.log("Revisão é a mãe do aprendizado")
  }
  criarFrases()
  criarFrases()
  criarFrases()

  2)function soma(n1: number, n2: number): number {
  return n1 + n2;
}

soma(10, 10)

3) function soma(n1:number, n2: number):number {
    return n1 + n2
}
let teste: number = soma(2, 3)
console.log(teste)

4)function soma(a:number, b: number):number {
    return a + b
}
let teste: number = soma(2, 3)
console.log(teste)

5) function isPar (numb:number):boolean {
    if (numb  % 2 === 0 ) {
        return  true
    } else { return  false}
}
console.log(isPar(10))

6)
function media(n1: number, n2: number, n3: number): number {
    return (n1 + n2 + n3) / 3 
}

console.log(media(7, 7, 7))

7) function imc (weigth: number, heigth:number): number {
    return weigth / ( heigth * heigth)
}
console.log(imc(75, 1.80).toFixed(2))

8) function calcDesconto(valorProduto: number, percentDesconto: number): number {
   const valorFinal: number = valorProduto - (valorProduto * percentDesconto / 100) 
    return valorFinal
}

console.log(calcDesconto(100, 10))

9) function calcularImpostoRenda(salarioBruto: number): number {
    if (salarioBruto <= 1903.98) {
        return 0;
    } else if (salarioBruto <= 2826.65) {
        return salarioBruto * 0.075 - 142.8;
    } else if (salarioBruto <= 3751.05) {
        return salarioBruto * 0.15 - 354.8;
    } else if (salarioBruto <= 4664.68) {
        return salarioBruto * 0.225 - 636.13;
    } else {
        return salarioBruto * 0.275 - 869.36;
    }
}

10) function calcularMediaArredondada(lista: number[]): number {
    const soma = lista.reduce((a, b) => a + b);
    const media = soma / lista.length;
    return Math.round(media);
}

console.log(calcularMediaArredondada([1,2,3,4,5]))

11) function contarDigitosParesImpares(numero: number): {
  pares: number;
  impares: number;
} {
  let digitos = numero.toString().split("");
  let pares = 0;
  let impares = 0;

  for (let i = 0; i > digitos.length; i++) {
    if (parseInt(digitos[i]) % 2 === 0) {
      pares++;
    } else {
      impares++;
    }
  }
  return { pares: pares, impares: impares };
}
console.log(contarDigitosParesImpares(123456789))

12) interface Aluno {
  nome: string;
  nota: number;
}

function calcularMediaAlunos(alunos: Aluno[]): number {
  let soma = 0;
  for (const aluno of alunos) {
    soma = +aluno.nota;
  }
  return soma / alunos.length;
}

  let listaDeAlunos = [
      { nome: "nemesio", nota: 9 },
      { nome: "jose", nota: 9 },
      { nome: "lib", nota: 10 },
  ]
  let media = calcularMediaAlunos(listaDeAlunos);
  console.log(media.toFixed(2));

13) function calcularIdade(nascimento: number): number {
  const dataAtual = new Date();
  const anoAtual = dataAtual.getFullYear();
  const idade = anoAtual - nascimento;
  return idade;
}

console.log(calcularIdade(1997))

14) function gerarTabuada(numero: numero): void {
  for (let i = 1; i <= 10; i++) {
    console.log(`${numero} x ${i} = ${numero * i}`);
  }
}

gerarTabuada(5)

15)  function advinheNumero(): void {
  const numeroAleatorio = Math.floor(Math.random() * 100) + 1;
  let tentativas = 0;
  let acertou = false;

  while (!acertou) {
    const palpite = Number(prompt("Advinhe um número entre 1 e 100"));
    tentativas++;
    if (palpite === numeroAleatorio) {
      alert(`Parabebéns! Você acertou em ${ tentativas}tentativas.`)
      acertou = true; 
    } else if (palpite > numeroAleatorio) {
      alert("Numero menor, tente novamente");
    } else {
      alert("O número é maior. Tente novamente.");
    }
  }
}

16) function verificarPropriedade(objeto:any, nomePropriedade: string): boolean {
  return nomePropriedade in objeto;
}

const user = {
  nome: "nemesio",
  idade: 25,
}

console.log(verificarPropriedade(user,"idade"))

17) function calcularProcoProduto (valorCusto: number, margemLucro: number, valorFrete: number): number {
  let precoVenda = valorCusto * (1 + margemLucro / 100) + valorFrete;
  return precoVenda;
}

console.log(calcularProcoProduto(100, 10, 10 ).toFixed(2))

18) function encontrarPalavraMaisLonga(frase: string): string {
  const palavras = frase.split(" ");
  let palavraMaisLonga = "";
  for(let i = 0; i < palavras.length; i++) {
    if (palavras[i].length > palavraMaisLonga.length) {
      palavraMaisLonga = palavras[i];
    }
  }
  return palavraMaisLonga;
}
console.log(encontrarPalavraMaisLonga("eu amo a programação"))

19) function imprimirQuadroRetangular(lista: string[]): void {
  const largura = Math.max(...lista.map((s) => s.length)) + 4;
  const linha = "*".repeat(largura);
  console.log(linha);
  for (const s of lista) {
    const espacos = " ".repeat(largura - s.length - 2);
    console.log(`* ${s}${espacos}*`);
  }
  console.log(linha)
}

console.log(imprimirQuadroRetangular(["nemesio", "carlos", "de", "solza"]))

20)function maisDeCincoCarac(listaDePalavras:string[]): string[] {
return listaDePalavras.filter(string => string.length > 5)
}
console.log(["nemesio", "carlos", "Solza","de", "calixto", ])

21) interface Book {
  title: string;
  author: string;
  year: number;
}

function filterBooksByAuthor(books: Book[], author: string):Book[] {
  return books.filter(book => book.author === author)
}
interface Book {
  title: string;
  author: string;
  year: number;
}

const books: Book[] = [
  { title: "Harry Potter and the Philosopher's Stone", author: "J.K. Rowling", year: 1997 },
  { title: "Harry Potter and the Chamber of Secrets", author: "J.K. Rowling", year: 1998 },
  { title: "The Hobbit", author: "J.R.R. Tolkien", year: 1937 },
  { title: "The Lord of the Rings", author: "J.R.R. Tolkien", year: 1954 }
];

const jkRowlingBooks = filterBooksByAuthor(books, "J.K. Rowling");
console.log(jkRowlingBooks);

22) interface Car {
  brand: string;
  model: string;
  year: number;
}

function filterCarsByYear(cars: Car[], year: number): Car[] {
  return cars.filter((car) => car.year > year);
}
const cars = [
  { brand: 'Ford', model: 'Mustang', year: 1964 },
  { brand: 'Ford', model: 'Fiesta', year: 2019 },
  { brand: 'Chevrolet', model: 'Camaro', year: 2022 },
  { brand: 'Chevrolet', model: 'Onix', year: 2018 },
];

const filteredCars = filterCarsByYear(cars, 2020);
console.log(filteredCars);

23) interface Car {
  brand: string;
  model: string;
  year: number;
}

function filterCarsByYear(cars: Car[], year: number): Car[] {
  return cars.filter((car) => car.year > year);
}
const cars = [
  { brand: 'Ford', model: 'Mustang', year: 1964 },
  { brand: 'Ford', model: 'Fiesta', year: 2019 },
  { brand: 'Chevrolet', model: 'Camaro', year: 2022 },
  { brand: 'Chevrolet', model: 'Onix', year: 2018 },
];

const filteredCars = filterCarsByYear(cars, 2020);
console.log(filteredCars);